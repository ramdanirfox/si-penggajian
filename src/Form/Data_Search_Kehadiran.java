/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Form;

import com.github.lgooddatepicker.components.DatePickerSettings;
import com.github.lgooddatepicker.optionalusertools.DateHighlightPolicy;
import com.github.lgooddatepicker.optionalusertools.DateVetoPolicy;
import com.github.lgooddatepicker.zinternaltools.HighlightInformation;
import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import koneksiDB.koneksi;

/**
 *
 * @author iramd
 */
public class Data_Search_Kehadiran extends javax.swing.JFrame {
    DatePickerSettings dateSettings;
    DatePickerSettings dateSettings2;
    Date vTglGaji;
    String vIdKry;
    Calendar dateMin, dateMax;
    ArrayList<Date> cutiStart = new ArrayList<>();
    ArrayList<Date> cutiEnd = new ArrayList<>();
    ArrayList<String> cutiText = new ArrayList<>();
    ArrayList<Date> lemburTgl = new ArrayList<>();
    ArrayList<String> lemburJam = new ArrayList<>();
    private static Statement st;
    SimpleDateFormat fmtTgl = new SimpleDateFormat("yyyy-MM-dd");
    DateTimeFormatter parseTgl = DateTimeFormatter.ofPattern("yyyy-MM-dd");
    /**
     * Creates new form Data_Search_Kehadiran
     * @param tglGaji
     * @param idKry
     */
    public Data_Search_Kehadiran(Date tglGaji, String idKry) {
        vTglGaji = tglGaji;
        vIdKry = idKry;
        
        SampleDateVetoPolicy vetoPolicy = new SampleDateVetoPolicy(vTglGaji);
        java.time.YearMonth yms = java.time.YearMonth.of(vetoPolicy.dateMin.get(Calendar.YEAR), vetoPolicy.dateMin.get(Calendar.MONTH) + 1);
        java.time.YearMonth yme = java.time.YearMonth.of(vetoPolicy.dateMax.get(Calendar.YEAR), vetoPolicy.dateMax.get(Calendar.MONTH) + 1);
        dateMin = vetoPolicy.dateMin;
        dateMax = vetoPolicy.dateMax;
        getData(buildQuery());
        
        initCfg();
        initComponents();
        dateSettings.setVetoPolicy(vetoPolicy);
        dateSettings2.setVetoPolicy(vetoPolicy);
        calendarPanel2.setDisplayedYearMonth(yms);
        calendarPanel1.setDisplayedYearMonth(yme);
    }
    
    private void initCfg() {
        dateSettings = new DatePickerSettings();
        dateSettings.setHighlightPolicy(new SampleHighlightPolicy());
        dateSettings2 = new DatePickerSettings();
        dateSettings2.setHighlightPolicy(new SampleHighlightPolicy());
        dateSettings.setVisibleClearButton(false);
        dateSettings2.setVisibleClearButton(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        calendarPanel1 = new com.github.lgooddatepicker.components.CalendarPanel(dateSettings);
        calendarPanel2 = new com.github.lgooddatepicker.components.CalendarPanel(dateSettings2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(calendarPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calendarPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(56, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(calendarPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(calendarPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Data_Search_Kehadiran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Data_Search_Kehadiran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Data_Search_Kehadiran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Data_Search_Kehadiran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Data_Search_Kehadiran(new Date(2024, 5, 28), "7").setVisible(true);
            }
        });
    }
    
    private class SampleHighlightPolicy implements DateHighlightPolicy {
        @Override
        public HighlightInformation getHighlightInformationOrNull(LocalDate date) {
            
            int i = 0;
            long e = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
            for (Date cs : cutiStart ) {
                if (e >= cs.getTime() && e < cutiEnd.get(i).getTime()) {
                   return new HighlightInformation(Color.RED, null, cutiText.get(i));
                }
                i++;
            }   
            
            i = 0;
            for (Date cs : lemburTgl ) {
                if (fmtTgl.format(cs).equals(date.format(parseTgl))) {
                   return new HighlightInformation(Color.CYAN, null, "Lembur " + lemburJam.get(i) + " jam");
                }
                i++;
            }
            
            return null;
        }
        
    }
    
    private String buildQuery() {
    String tglAwal = fmtTgl.format(dateMin.getTime());
    String tglAkhir = fmtTgl.format(dateMax.getTime());
        String sql = "" +
    " WITH RECURSIVE DateRange AS (" +
    " SELECT '"+tglAwal+"' AS date" +
    " UNION ALL" +
    " SELECT DATE_ADD(date, INTERVAL 1 DAY)" +
    " FROM DateRange" +
    " WHERE date < '"+tglAkhir+"'" +
    " )" +
    " SELECT" +
    " date," +
    " dayname(date) AS namahari," +
    " EXTRACT(HOUR from timediff(k.jam_pulang, k.jam_masuk)) AS durasi_hadir_jam," +
    " EXTRACT(HOUR from k.jam_masuk) AS hanya_jam_masuk," +
    " EXTRACT(HOUR from k.jam_pulang) AS hanya_jam_pulang," +
    " c.tgl_cuti," +
    " c.tgl_masuk," +
    " c.alasan," +
    " l.tanggal_lembur," +
    " l.jml_jam" +
    " FROM " +
    " DateRange" +
    " LEFT JOIN (SELECT * FROM kehadiran WHERE karyawanID = "+vIdKry+") k " +
    " ON date = date_format(k.jam_masuk, '%Y-%m-%d')" +
    " LEFT JOIN (SELECT * FROM cuti WHERE karyawanID = "+vIdKry+") c" +
    " ON date = date_format(c.tgl_cuti, '%Y-%m-%d')" +
    " LEFT JOIN (SELECT * FROM lembur WHERE karyawanID = "+vIdKry+") l " +
    " ON date = date_format(l.tanggal_lembur, '%Y-%m-%d')" +
    " ORDER BY date ASC";
    return sql;
    }
    
    private ArrayList<ArrayList<String>> getData(String query) {
       ArrayList<ArrayList<String>> al = new ArrayList();
       try {
            cutiStart = new ArrayList<>();
            cutiEnd = new ArrayList<>();
            st = (Statement) koneksi.getKoneksi().createStatement();
            String sql = query;
            ResultSet res = st.executeQuery(sql);
            while(res.next()){
                  ArrayList<String> obj = new ArrayList<>();    
                  obj.add(res.getString("date"));//0
                  obj.add(res.getString("namahari"));//1
                  obj.add(res.getString("durasi_hadir_jam"));//2
                  obj.add(res.getString("hanya_jam_masuk"));//3
                  obj.add(res.getString("hanya_jam_pulang"));//4
                  obj.add(res.getString("tgl_cuti"));//5
                  obj.add(res.getString("tgl_masuk"));//6
                  obj.add(res.getString("alasan"));//7
                  obj.add(res.getString("tanggal_lembur"));
                  obj.add(res.getString("jml_jam"));
                  al.add(obj);
                  if (obj.get(5) != null) {
                      System.out.println(obj.get(0) + "Ada cuti" + res.getString("tgl_cuti"));
                      cutiStart.add(res.getDate("tgl_cuti"));
                      cutiEnd.add(res.getDate("tgl_masuk"));
                      cutiText.add(res.getString("alasan"));
                  }
                  
                  if (obj.get(8) != null) {
                        lemburTgl.add(res.getDate("tanggal_lembur"));
                        lemburJam.add(res.getString("jml_jam"));
                  }
                  
            }
//            System.out.println(obj.get(0));
            return al;
        }catch(SQLException err){
            JOptionPane.showMessageDialog(null, err.getMessage());
            return new ArrayList();
        }
    }
    
    private class SampleDateVetoPolicy implements DateVetoPolicy {
    /**
     * isDateAllowed, Return true if a date should be allowed, or false if a date should be vetoed.
     */
    public Calendar dateMin, dateMax;
        
    public void setParam() {
        DateTimeFormatter p = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S");
//        tgl
    }
    
    public SampleDateVetoPolicy(Date tglGaji) {
        DateTimeFormatter p = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.S");
        Calendar s = Calendar.getInstance();
        s.setTime(tglGaji);
        int selectedMonth = s.get(Calendar.MONTH);
        if (s.get(Calendar.DATE) > 28) {
            selectedMonth += 1;        
        }
        Calendar a = Calendar.getInstance();
        a.set(Calendar.MONTH, selectedMonth);
        Calendar b = Calendar.getInstance();
        b.set(Calendar.MONTH, selectedMonth);
        a.add(Calendar.MONTH, -1);
        a.set(Calendar.DATE, 28);
        b.set(Calendar.DATE, 28);
        dateMin = a;
        dateMax = b;
    }
        
    @Override
    public boolean isDateAllowed(LocalDate date) {
      // Disallow days 7 to 11.
//      if ((date.getDayOfMonth() >= 7) && (date.getDayOfMonth() <= 11)) {
      long e = date.atStartOfDay().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
      if (e < dateMax.getTimeInMillis()&& e > dateMin.getTimeInMillis()) {
        return true;
      }
      // Disallow odd numbered saturdays.
//      if ((date.getDayOfWeek() == DayOfWeek.SATURDAY) && ((date.getDayOfMonth() % 2) == 1)) {
//        return false;
//      }
      // Allow all other days.
      return false;
    }
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.github.lgooddatepicker.components.CalendarPanel calendarPanel1;
    private com.github.lgooddatepicker.components.CalendarPanel calendarPanel2;
    // End of variables declaration//GEN-END:variables
}
